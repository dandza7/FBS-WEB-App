// <auto-generated />
using FBSApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FBSApp.Migrations
{
    [DbContext(typeof(FBS_DB_Context))]
    [Migration("20230730170344_addedUserDBSet")]
    partial class addedUserDBSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FBSApp.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "admin@gmail.com",
                            Password = "79FC2AA5454A196D8FF394B439AD3C4AC00114821738C23BB05AA69C6F342EBE56A7ED3168C1379773B45DE1BD2B02F5FD1BCC534BD7DDE0BE1CE3C33B1AEECB",
                            Role = "ADMIN",
                            Salt = new byte[] { 23, 47, 146, 60, 175, 131, 112, 93, 166, 113, 50, 101, 203, 71, 151, 213, 169, 203, 245, 232, 128, 142, 170, 185, 78, 166, 75, 191, 107, 106, 214, 199, 128, 179, 12, 81, 115, 184, 177, 7, 128, 9, 62, 224, 129, 235, 149, 113, 29, 137, 124, 79, 145, 89, 167, 243, 42, 153, 56, 193, 39, 144, 245, 68 }
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
